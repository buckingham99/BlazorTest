#pragma checksum "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b5a9e0bd0fa5ac8ef2fe32098edbd7c85942f7cf"
// <auto-generated/>
#pragma warning disable 1591
namespace BlazorTest.Pages
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using BlazorTest.Shared;
    using Microsoft.AspNetCore.Components;
    using System;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/bloodtype")]
    public class BloodType : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
            builder.OpenElement(0, "h1");
            builder.AddAttribute(1, "style", "display:none;");
            builder.AddContent(2, ChildContent);
            builder.CloseElement();
            builder.AddMarkupContent(3, "\r\n");
            builder.OpenElement(4, "div");
            builder.AddAttribute(5, "style", "background-color:lightpink;display:" + (DisplayType));
            builder.AddMarkupContent(6, "\r\n    ");
            builder.AddMarkupContent(7, "<div>\r\n        <label><b><u>Blood Type Data:</u></b></label>\r\n    </div>\r\n    ");
            builder.OpenElement(8, "div");
            builder.AddAttribute(9, "style", "font-size:xx-small");
            builder.AddMarkupContent(10, "\r\n        ");
            builder.OpenElement(11, "table");
            builder.AddAttribute(12, "class", "table table-hover table-condensed table-bordered table-sm");
            builder.AddAttribute(13, "style", "font-size:xx-small");
            builder.AddMarkupContent(14, "\r\n            ");
            builder.OpenElement(15, "tbody");
            builder.AddMarkupContent(16, "\r\n");
#line 13 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                 if (@bloodTypesList.Count > 0)
                {
                    

#line default
#line hidden
#line 15 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                     foreach (var u in GenderName)
                    {

#line default
#line hidden
            builder.AddContent(17, "                        ");
            builder.OpenElement(18, "tr");
            builder.AddMarkupContent(19, "\r\n");
#line 18 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                             for (int i = 0; i < @bloodTypesList.Where(x => x.Gender == @u.Gender).Count(); i++)
                            {
                                

#line default
#line hidden
#line 20 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                                 if (i == 0)
                                {

#line default
#line hidden
            builder.AddContent(20, "                                    ");
            builder.OpenElement(21, "td");
            builder.OpenElement(22, "b");
            builder.OpenElement(23, "u");
            builder.AddContent(24, u.Gender.ToUpper().Trim());
            builder.CloseElement();
            builder.CloseElement();
            builder.CloseElement();
            builder.AddMarkupContent(25, "\r\n");
#line 23 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                                }
                                else
                                {

#line default
#line hidden
            builder.AddMarkupContent(26, "                                    <td></td>\r\n");
#line 27 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                                }

#line default
#line hidden
#line 27 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                                 
                            }

#line default
#line hidden
            builder.AddContent(27, "                        ");
            builder.CloseElement();
            builder.AddMarkupContent(28, "\r\n                        ");
            builder.OpenElement(29, "tr");
            builder.AddMarkupContent(30, "\r\n");
#line 31 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                             for (int i = 0; i < @bloodTypesList.Where(x => x.Gender == @u.Gender).Count(); i++)
                            {

#line default
#line hidden
            builder.AddContent(31, "                                ");
            builder.OpenElement(32, "td");
            builder.OpenElement(33, "b");
            builder.AddContent(34, bloodTypesList.Where(x => x.Gender == @u.Gender).Skip(i).Take(1).FirstOrDefault().BloodType.Trim());
            builder.CloseElement();
            builder.CloseElement();
            builder.AddMarkupContent(35, "\r\n");
#line 34 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                            }

#line default
#line hidden
            builder.AddContent(36, "                        ");
            builder.CloseElement();
            builder.AddMarkupContent(37, "\r\n                        ");
            builder.OpenElement(38, "tr");
            builder.AddMarkupContent(39, "\r\n");
#line 37 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                             for (int i = 0; i < @bloodTypesList.Where(x => x.Gender == @u.Gender).Count(); i++)
                            {

#line default
#line hidden
            builder.AddContent(40, "                                ");
            builder.OpenElement(41, "td");
            builder.AddContent(42, bloodTypesList.Where(x => x.Gender == @u.Gender).Skip(i).Take(1).FirstOrDefault().BloodTypeTotalCount.ToString("#,##0"));
            builder.CloseElement();
            builder.AddMarkupContent(43, "\r\n");
#line 40 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                            }

#line default
#line hidden
            builder.AddContent(44, "                        ");
            builder.CloseElement();
            builder.AddMarkupContent(45, "\r\n");
#line 42 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                    }

#line default
#line hidden
#line 42 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                     
                }

#line default
#line hidden
            builder.AddContent(46, "            ");
            builder.CloseElement();
            builder.AddMarkupContent(47, "\r\n        ");
            builder.CloseElement();
            builder.AddMarkupContent(48, "\r\n    ");
            builder.CloseElement();
            builder.AddMarkupContent(49, "\r\n");
            builder.CloseElement();
        }
        #pragma warning restore 1998
#line 49 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
            
    [Serializable]
    public class BloodTypes
    {
        public string Gender { get; set; }
        public string BloodType { get; set; }
        public int BloodTypeTotalCount { get; set; }
    }

    private List<BloodTypes> GenderName = new List<BloodTypes>();

    public List<BloodTypes> _bloodTypesList = new List<BloodTypes>();

    [Parameter]
    private RenderFragment ChildContent { get; set; }


    [Parameter]
    public IReadOnlyList<BloodTypes> bloodTypesList
    {
        get { return _bloodTypesList; }
        set
        {
            if (value.Count > 0)
            {
                
                _bloodTypesList = value.ToList();

                GenderName = _bloodTypesList.GroupBy(x => new { x.Gender })
                .Select(r => new BloodTypes
                {
                    Gender = r.Key.Gender
                })
                .OrderBy(r => r.Gender).ToList();
                ToggleDisplay(true);
                onBloodTypes();
            }
        }
    }

    List<BloodTypes> onBloodTypes()
    {
        ToggleDisplay(true);
        return _bloodTypesList.ToList();
    }


    string DisplayType { get; set; }

    private string ToggleDisplay(bool spinnerOn)
    {
        DisplayType = (spinnerOn) ? "block;" : "none;";
        return DisplayType;
    }

    protected override void OnInit()
    {
        ToggleDisplay(false);
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
