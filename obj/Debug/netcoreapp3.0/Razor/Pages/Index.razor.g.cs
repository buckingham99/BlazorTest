#pragma checksum "C:\Develop\BlazorTest\BlazorTest\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "48939a20a5d20ef20fbd0d3f85a766ee44502902"
// <auto-generated/>
#pragma warning disable 1591
namespace BlazorTest.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using BlazorTest.Shared;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
            builder.AddMarkupContent(0, "<HeadingComponent></HeadingComponent>\n\n");
            builder.AddMarkupContent(1, "<h2>Blazor Test by Mark Buckingham</h2>\n");
            builder.AddMarkupContent(2, "<p>This is a test of using <b>Client Side</b> <u>Blazor Components</u></p>\n\n");
            builder.AddMarkupContent(3, "<p>This is the standard Blazor Client side template and it\'s been extended from there.</p>\n\n");
            builder.AddMarkupContent(4, "<p>I didn\'t want to load up a MDF file for the database, so I used a CSV file from FakeNames.Com for data.\n    (Located in the Data folder).\n    </p>\n");
            builder.OpenElement(5, "p");
            builder.AddMarkupContent(6, "\r\n    Since I wanted to start quickly I used the Trial Telerik Controls for Blazor.\r\n\r\n    ");
            builder.OpenComponent<Microsoft.AspNetCore.Components.Routing.NavLink>(7);
            builder.AddAttribute(8, "class", "nav-link");
            builder.AddAttribute(9, "href", "userdata");
            builder.AddAttribute(10, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((builder2) => {
                builder2.AddContent(11, "Telerik data grid");
            }
            ));
            builder.CloseComponent();
            builder.AddMarkupContent(12, "\r\n    This is Excellent for UI, however I wanted to dig a little deeper into the \r\n    binding methods available and created another gris with editing, located here: \r\n    ");
            builder.OpenComponent<Microsoft.AspNetCore.Components.Routing.NavLink>(13);
            builder.AddAttribute(14, "class", "nav-link");
            builder.AddAttribute(15, "href", "testuserdata");
            builder.AddAttribute(16, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((builder2) => {
                builder2.AddContent(17, "HTML Grid");
            }
            ));
            builder.CloseComponent();
            builder.AddMarkupContent(18, "\r\n");
            builder.CloseElement();
            builder.AddMarkupContent(19, "\n");
            builder.AddMarkupContent(20, @"<p>
    The Test HTML grid parses the CSV file via a Names Service 
    and creates a user list that is persisted in a Cache.

    This page also takes advantage of invoking JavaScript to handle a standard Bootstrap Modal.
    Changes can be made and will persist throughout the session, they will go away 
    once you've navigated away from the site.
    You can easily add a database to this via the Names Service and persist the data.


</p>");
        }
        #pragma warning restore 1998
    }
}
#pragma warning restore 1591
