#pragma checksum "C:\Develop\GitHub\BlazorTest\Pages\DataGrid.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "18319abf02e17c498ac5ba6632dc97f75cf7c7fb"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorTest.Pages
{
    #line hidden
    using System;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using BlazorTest.Shared;
    using BlazorTest.Data;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Microsoft.AspNetCore.Components;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    public class DataGrid : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 216 "C:\Develop\GitHub\BlazorTest\Pages\DataGrid.razor"
            
    int recordsToReturn = 200;
    List<User> users = new List<User>();
    int namesCount = 0;
    string SortField = "Id";
    bool SortDesc = false;
    string SurnameSort = String.Empty;
    string GivenNameSort = String.Empty;
    string StreetAddressSort = String.Empty;
    string CitySort = String.Empty;
    string StateSort = String.Empty;
    string ZipCodeSort = String.Empty;
    string PhoneSort = String.Empty;

    // Edit Dialog Entries
    User SelectedUser;

    protected async override void OnInit()
    {
        //ToggleSpinner(true);
        this.StateHasChanged();
        await ReadData();
        ToggleSpinner(false);
    }
    private async Task ReadData()
    {
        BlankDirectionIcons();
        users = await NamesService.GetNamesDataAsync(SortField, SortDesc);
        namesCount = users.Count;
    }
    private async void ToggleSpinner(bool spinnerOn)
    {
        if (spinnerOn == false)
        {
          await JSRuntime.InvokeAsync<string>(
                 "appFunctions.hideSpinner", "");
        }
        else
        {
            await JSRuntime.InvokeAsync<string>(
                 "appFunctions.showSpinner", "");
        }
    }
    async Task SortData(string szSortField)
    {
        ToggleSpinner(true);

        BlankDirectionIcons();
        SortField = szSortField;
        SortDesc = !SortDesc;
        CalcIconDirection(SortField);
        users = await NamesService.SortNamesDataAsync(SortField, SortDesc, users);

        ToggleSpinner(false);
    }

    string CalcIconDirection(string SortField)
    {
        string szDirection = SortDesc == true ? "oi oi-arrow-thick-bottom" : "oi oi-arrow-thick-top";
        switch (SortField)
        {
            case "Surname":
                SurnameSort = szDirection;
                return SurnameSort;
            case "GivenName":
                GivenNameSort = szDirection;
                return GivenNameSort;
            case "StreetAddress":
                StreetAddressSort = szDirection;
                return StreetAddressSort;
            case "City":
                CitySort = szDirection;
                return CitySort;
            case "State":
                StateSort = szDirection;
                return StateSort;
            case "TelephoneNumber":
                PhoneSort = szDirection;
                return PhoneSort;
            case "ZipCode":
                ZipCodeSort = szDirection;
                return ZipCodeSort;
            default:
                return String.Empty;
        }
    }
    void BlankDirectionIcons()
    {
        SurnameSort = "";
        GivenNameSort = "";
        StreetAddressSort = "";
        CitySort = "";
        StateSort = "";
        ZipCodeSort = "";
        PhoneSort = "";
    }

    private void PopulateUserDialog(User myUser)
    {
        SelectedUser = myUser;
    }

    private async void EditUser(User myUser)
    {
        SelectedUser = myUser;
        await  JSRuntime.InvokeAsync<string>(
                 "appFunctions.showEditUserModal", "");
        //PopulateUserDialog(myUser);
    }
    private async Task<List<User>> SaveUser(User SelectedUser)
    {
        ToggleSpinner(false);

        users = await NamesService.SaveUserAsync(SortField, SortDesc, users, SelectedUser);

        ToggleSpinner(true);

        this.StateHasChanged();
        return users;
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NamesService NamesService { get; set; }
    }
}
#pragma warning restore 1591
