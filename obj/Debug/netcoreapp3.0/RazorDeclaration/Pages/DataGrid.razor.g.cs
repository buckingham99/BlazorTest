#pragma checksum "C:\Develop\GitHub\BlazorTest\Pages\DataGrid.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "41341301ada7dd28d795e79e6bfd9d1756b7fa99"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorTest.Pages
{
    #line hidden
    using System;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using BlazorTest.Shared;
    using BlazorTest.Models;
    using BlazorTest.Services;
    using BlazorTest.Helpers;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Microsoft.AspNetCore.Components;
    using System.Reflection;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    public class DataGrid : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 255 "C:\Develop\GitHub\BlazorTest\Pages\DataGrid.razor"
            


    private int currentPage = 1;
    private int pageSize = 30;

    private List<User> users = new List<User>();
    private List<User> displayUsers = new List<User>();
    public User UnModifiedUser = new User();
    private User SelectedUser = new User();
    private int namesCount = 0;


    private bool SortDesc = false;
    private string SurnameSort = String.Empty;
    private string GivenNameSort = String.Empty;
    private string StreetAddressSort = String.Empty;
    private string CitySort = String.Empty;
    private string StateSort = String.Empty;
    private string ZipCodeSort = String.Empty;
    private string PhoneSort = String.Empty;
    private string LoaderDisplayType = "block;";
    private int _TotalPages;
    private int TotalPages { get; set; }

    private List<int> btnlist = new List<int>();

    [Parameter]
    public string SearchString { get; set; }
    [Parameter]
    public string SortField { get; set; } = "Surname";
    [Parameter]
    public List<string> SortParameters {
        get { return new List<string>(); }
        set
        {
            if (value.Count > 0)
            {
                SortData(value[0], value[1]);
            }

        }
    }

    /// I changed this to OnInit from OnInit Async
    /// since I start populating the Users once the Index page has loaded
    /// Once you reach this page the users are in a List of Users.

    protected override void OnInit()
    {
        ToggleSpinner(true);

        //users = NamesService.GetNamesJson(SortField = SortField == null ? "Id" : SortField, SortDesc);
        users = NamesService.GetNamesData(SortField = SortField == null ? "Id" : SortField, SortDesc);
        namesCount = users.Count;

        recalcPageButtons(users.Count);

        displayUsers = users.OrderByDescending(s => s.GetType()
        .GetProperty(SortField)
        .GetValue(s))
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize).ToList();
        ToggleSpinner(false);
        StateHasChanged();
    }


    private void ToggleSpinner(bool spinnerOn)
    {
        LoaderDisplayType = (spinnerOn) ? "block;" : "none;";
    }
    void ChangePage(int newPage)
    {
        ToggleSpinner(true);
        currentPage = newPage;
        SortDesc = !SortDesc;
        //Reverse Sort so that the sort stays the same
        SortData(SortField,SearchString);
        StateHasChanged();
        ToggleSpinner(false);
    }

    public void SortData(string SortField,string SearchString)
    {
        if (displayUsers.Count > 0)
        {
            ToggleSpinner(true);
            BlankDirectionIcons();
            SortDesc = !SortDesc;
            CalcIconDirection(SortField);
            if (SearchString == "" || SearchString == null)
            {
                if (SortDesc)
                {
                    displayUsers = users.OrderByDescending(s => s.GetType()
                    .GetProperty(SortField)
                    .GetValue(s))
                    .Skip((currentPage - 1) * pageSize)
                    .Take(pageSize).ToList();
                }
                else
                {
                    displayUsers = users.OrderBy(s => s.GetType()
                    .GetProperty(SortField)
                    .GetValue(s))
                    .Skip((currentPage - 1) * pageSize)
                    .Take(pageSize).ToList();
                }
            }
            else
            {
                if (SortDesc)
                {
                    displayUsers = users.Where(s => s.GetType().GetProperty(SortField).GetValue(s)
                    .ToString().ToLower().StartsWith(SearchString.ToLower()))
                    .OrderByDescending(x => x.GetType().GetProperty(SortField).GetValue(x)
                    .ToString()).ToList();
                }
                else
                {
                    displayUsers = users.Where(s => s.GetType().GetProperty(SortField).GetValue(s)
                    .ToString().ToLower().StartsWith(SearchString.ToLower()))
                    .OrderBy(x => x.GetType().GetProperty(SortField).GetValue(x)
                    .ToString()).ToList();
                }
            }
            if (displayUsers.Count == 0)
            {
                displayUsers = NamesService.GetNamesData(SortField = SortField == null ? "Id" : SortField, SortDesc);
            }

            if (SearchString == "")
            {
                recalcPageButtons(users.Count);
            }
            else
            {
                recalcPageButtons(displayUsers.Count);
            }

            ToggleSpinner(false);
            //StateHasChanged();
        }
    }
    public List<int> recalcPageButtons(int TotalRecords)
    {
        int _myCount = 0;
        if (TotalRecords > 0)
        {
            _myCount = TotalRecords > 0 ? (int)Math.Ceiling(decimal.Divide(TotalRecords, pageSize)) : 0;
            btnlist.Clear();
            for (int i = 1; i < _myCount + 1; i++)
            {
                btnlist.Add(i);
            }
        }
        return btnlist;
    }
    public void SearchData(string SearchString)
    {
        if (users.Count > 0 &&  SearchString.Length > 0)
        {
            ToggleSpinner(true);
            BlankDirectionIcons();
            SortDesc = !SortDesc;
            CalcIconDirection(SortField);
            if (SortDesc)
            {
                displayUsers = users.Where(s => s.GetType()
                .GetProperty(SortField).GetValue(s).ToString().ToLower()
                .StartsWith(SearchString.ToLower()))
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .OrderByDescending(x => x.GetType()
                .GetProperty(SortField).GetValue(x)).ToList();
            }
            else
            {
                displayUsers = users.Where(s => s.GetType()
                .GetProperty(SortField).GetValue(s).ToString().ToLower()
                .StartsWith(SearchString.ToLower()))
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .OrderBy(x => x.GetType()
                .GetProperty(SortField).GetValue(x)).ToList();
            }


            //ToggleSpinner(false);
            StateHasChanged();
        }
    }

    private string CalcIconDirection(string SortField)
    {
        string szDirection = SortDesc == true ? "oi oi-arrow-thick-bottom" : "oi oi-arrow-thick-top";
        switch (SortField)
        {
            case "Surname":
                SurnameSort = szDirection;
                return SurnameSort;
            case "GivenName":
                GivenNameSort = szDirection;
                return GivenNameSort;
            case "StreetAddress":
                StreetAddressSort = szDirection;
                return StreetAddressSort;
            case "City":
                CitySort = szDirection;
                return CitySort;
            case "State":
                StateSort = szDirection;
                return StateSort;
            case "TelephoneNumber":
                PhoneSort = szDirection;
                return PhoneSort;
            case "ZipCode":
                ZipCodeSort = szDirection;
                return ZipCodeSort;
            default:
                return String.Empty;
        }
    }
    void BlankDirectionIcons()
    {
        SurnameSort = "";
        GivenNameSort = "";
        StreetAddressSort = "";
        CitySort = "";
        StateSort = "";
        PhoneSort = "";
        ZipCodeSort = "";
    }
    /// <summary>
    /// Modal Section
    /// </summary>
    /// <param name="myUser"></param>
    private async void EditUser(User myUser)
    {
        SelectedUser = myUser;
        UnModifiedUser = Comparer.DeepCopy<User>(SelectedUser);

        await JSRuntime.InvokeAsync<string>(
                 "appFunctions.showModal", "editUserModal");

        ChangeTab("User");
        ShowMap(SelectedUser);
    }
    private async void ShowMap(User SelectedUser)
    {
        decimal[] CoordinateArray = new decimal[]
        {
            Convert.ToDecimal(SelectedUser.Longitude),
            Convert.ToDecimal(SelectedUser.Latitude)
            };
        await JSRuntime.InvokeAsync<string>(
                  "appFunctions.showMap", CoordinateArray);
        StateHasChanged();
    }
    private async void ChangeTab(string tab)
    {
        await JSRuntime.InvokeAsync<string>(
                 "appFunctions.changeTabs", tab);
    }
    private async Task<List<User>> SaveUser(User SelectedUser)
    {
        //await JSRuntime.InvokeAsync<string>(
        //    "appfunctions.saveConfirmation", "");

        //await JSRuntime.InvokeAsync<string>(
        //    "appFunctions.hideEditUserModal", "");

        users = await NamesService.SaveUserAsync(SortField, SortDesc, users, SelectedUser, currentPage, pageSize);

        await JSRuntime.InvokeAsync<string>(
                "appFunctions.hideModal", "editUserModal");

        ToggleSpinner(false);
        StateHasChanged();
        return users;
    }
    private async Task<List<User>> CancelSaveUser(User SelectedUser)
    {
        if (!Comparer.DeepCompare(SelectedUser, UnModifiedUser))
        {
            users = await NamesService.SaveUserAsync(SortField, SortDesc, users, UnModifiedUser, currentPage, pageSize);
        }


        SelectedUser = null;
        UnModifiedUser = null;

        await JSRuntime.InvokeAsync<string>(
            "appFunctions.hideModal", "EditUserModal");

        ToggleSpinner(false);
        return users;
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NamesService NamesService { get; set; }
    }
}
#pragma warning restore 1591
