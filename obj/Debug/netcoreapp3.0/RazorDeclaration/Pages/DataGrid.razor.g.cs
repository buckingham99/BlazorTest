#pragma checksum "C:\Develop\GitHub\BlazorTest\Pages\DataGrid.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a8f03e436a9fac637a780b3517719e9f0d1a0888"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorTest.Pages
{
    #line hidden
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using BlazorTest.Shared;
    using BlazorTest.Models;
    using BlazorTest.Services;
    using BlazorTest.Helpers;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Microsoft.AspNetCore.Components;
    using System.Reflection;
    using System;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    public class DataGrid : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 293 "C:\Develop\GitHub\BlazorTest\Pages\DataGrid.razor"
                
        [Parameter] EventCallback<string> OnSortLinkClicked { get; set; }
        [Parameter] EventCallback<string> OnSearchError { get; set; }
        [Parameter] EventCallback<string> OnUserCount { get; set; }
        [Parameter] EventCallback<string> OnSearchText { get; set; }
        private int currentPage  { get; set; } = 1;
        private int pageSize = 30;

        private List<User> users = new List<User>();
        private List<User> displayUsers = new List<User>();
        private User UnModifiedUser = new User();
        private User SelectedUser = new User();

        private bool SortDesc { get; set; }
        private string SurnameSort { get; set; }
        private string GivenNameSort { get; set; }
        private string StreetAddressSort { get; set; }
        private string CitySort { get; set; }
        private string StateSort { get; set; }
        private string ZipCodeSort { get; set; }
        private string TelephoneNumberSort { get; set; }
        private string SearchErrorText { get; set; }
        private string LoaderDisplayType { get; set; } = "block;";
        private int TotalPages { get; set; }
        //private int namesCount  { get; set; } = 0;

        private int _namesCount = 0;
        public int namesCount
        {
            get { return _namesCount; }
            set
            {
                if (value != 0)
                {
                    ToggleSpinner(true);
                   
                    if (value != _namesCount)
                    {
                        OnUserCount.InvokeAsync(value.ToString());
                    }
                    _namesCount = value; 
                    ToggleSpinner(false);
                }
            }
        }
        private List<int> btnlist = new List<int>();

        public string _SearchString { get; set; }
        [Parameter]
        public string SearchString
        {
            get { return _SearchString; }
            set
            {
                if (value != "" && value != null)
                {
                    ToggleSpinner(true);
                    _SearchString = value;
                    SearchData(value);
                    //ToggleSpinner(false);
                }
            }
        }

        public string _SortField { get; set; } = "Surname";
        [Parameter]
        public string SortField
        {
            get { return _SortField; }
            set
            {
                if (value != "" && value != null && users.Count > 0)
                {
                    ToggleSpinner(true);
                    _SortField = value;
                    SortData(value);
                    //ToggleSpinner(false);
                }
            }
        }

        /// I changed this to OnInit from OnInit Async
        /// since I start populating the Users once the Index page has loaded
        /// Once you reach this page the users are in a List of Users.

        protected override void OnInit()
        {
            ToggleSpinner(true);
        }
        protected override async Task OnInitAsync()
        {
            //ToggleSpinner(true);
            SortDesc = true;
            var tmp = await Task.FromResult(UserService.GetNamesData(SortField == "" ? "Surname" : SortField, SortDesc));
            namesCount = UserService.UsersCount;
            recalcPageButtons(namesCount);
            await OnSortLinkClicked.InvokeAsync("Surname");
            users = tmp;
            //await OnUserCount.InvokeAsync(namesCount.ToString());
            ToggleSpinner(false);

        }


        private void ForceRecordCountChange(string RecordsToChange)
        {
            ToggleSpinner(true);
            displayUsers.Clear();
            users.Clear();

            users = UserService.GetNamesData(SortField = SortField == null ? "Id" : SortField, SortDesc);
            namesCount = users.Count;

            displayUsers = users.OrderByDescending(s => s.GetType()
            .GetProperty(SortField)
            .GetValue(s))
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize).ToList();
            recalcPageButtons(users.Count);

            ToggleSpinner(false);
        }

        private string ToggleSpinner(bool spinnerOn)
        {
            LoaderDisplayType = (spinnerOn) ? "block;" : "none;";
            return LoaderDisplayType;
        }
        void ChangePage(int newPage)
        {
            currentPage = newPage;
            OnSortLinkClicked.InvokeAsync(SortField);
        }

        void SortLinkClicked(string dataToSend)
        {
            ToggleSpinner(true);
            SortDesc = !SortDesc;
            OnSortLinkClicked.InvokeAsync(dataToSend);
        }
        void NotifyParent(string dataToSend)
        {
            OnSortLinkClicked.InvokeAsync(SortField);
        }
        async Task SearchError()
        {
            await Task.FromResult(
                OnSearchError.InvokeAsync(SearchErrorText));
            SearchString = "";
        }
        async Task UserCountUpdate(int myCount)
        {
            await Task.FromResult
                (
                    OnUserCount.InvokeAsync(myCount.ToString())
                );
        }

        public void SortData(string SortField)
        {
            if (users.Count > 0)
            {
                ToggleSpinner(true);
                CalcIconDirection(SortField);

                if (SortDesc)
                {
                    displayUsers = users
                    .OrderByDescending(x => x.GetType().GetProperty(SortField).GetValue(x)
                    .ToString())
                    .Skip((currentPage - 1) * pageSize)
                    .Take(pageSize)
                    .ToList();

                }
                else
                {
                    displayUsers = users
                    .OrderBy(x => x.GetType().GetProperty(SortField).GetValue(x)
                    .ToString())
                    .Skip((currentPage - 1) * pageSize)
                    .Take(pageSize)
                    .ToList();
                    //displayUsers = users
                    //.OrderBy(x => x.GetType().GetProperty(SortField).GetValue(x)
                    //.ToString()).ToList();
                }

            }
            if (SearchString != "")
            {
                recalcPageButtons(users.Count);
                //namesCount = users.Count;
            }
            if ((SearchString == "" || SearchString == null) && users.Count > 0)
            {
                recalcPageButtons(users.Count);
                namesCount = users.Count;
            }

            ToggleSpinner(false);

        }
        public async Task ShowError(string errMessage)
        {
            await Task.FromResult(JSRuntime.InvokeAsync<string>(
                         "appFunctions.showModal", "searchError", "Search Text: " +
                         SearchString + " was not found"));

        }
        public List<int> recalcPageButtons(int TotalRecords)
        {
            int _myCount = 0;
            if (TotalRecords > 0)
            {
                _myCount = TotalRecords > 0 ? (int)Math.Ceiling(decimal.Divide(TotalRecords, pageSize)) : 0;
                btnlist.Clear();
                for (int i = 1; i < _myCount + 1; i++)
                {
                    btnlist.Add(i);
                }
            }
            return btnlist;
        }
        public void SearchData(string SearchString)
        {
            if (SearchString.Length > 0 && users.Count > 0)
            {
                ToggleSpinner(true);
                CalcIconDirection(SortField);
                if (SortDesc)
                {
                    displayUsers = users.Where(s => s.GetType()
                    .GetProperty(SortField).GetValue(s).ToString().ToLower()
                    .StartsWith(SearchString.ToLower()))
                    .Skip((currentPage - 1) * pageSize)
                    .Take(pageSize)
                    .OrderByDescending(x => x.GetType()
                    .GetProperty(SortField).GetValue(x)).ToList();
                }
                else
                {
                    displayUsers = users.Where(s => s.GetType()
                    .GetProperty(SortField).GetValue(s).ToString().ToLower()
                    .StartsWith(SearchString.ToLower()))
                    .Skip((currentPage - 1) * pageSize)
                    .Take(pageSize)
                    .OrderBy(x => x.GetType()
                    .GetProperty(SortField).GetValue(x)).ToList();
                }
                //namesCount = displayUsers.Count;
                recalcPageButtons(displayUsers.Count);
                ToggleSpinner(false);
            }
            if (SearchString.Length == 0)
            {
               // namesCount = users.Count;
                recalcPageButtons(users.Count);
                OnSortLinkClicked.InvokeAsync(SortField);
            }
            /*
            if(SearchString.Length == 0  && users.Count > 0)
            {
                 OnSortLinkClicked.InvokeAsync(SortField);
                recalcPageButtons(users.Count);
            }
            */
            ToggleSpinner(false);
        }
        static string OrderCheck(bool SortDesc)
        {
            if (SortDesc)
            {
                return "oi oi-arrow-thick-bottom";
            }
            else
            {
                return "oi oi-arrow-thick-top";
            }
        }
        private string CalcIconDirection(string SortField)
        {
            SurnameSort = SortField != "Surname" ? "" : SurnameSort;
            GivenNameSort = SortField != "GivenName" ? "" : GivenNameSort;
            StreetAddressSort = SortField != "StreetAddress" ? "" : StreetAddressSort;
            CitySort = SortField != "City" ? "" : CitySort;
            StateSort = SortField != "State" ? "" : StateSort;
            TelephoneNumberSort = SortField != "TelephoneNumber" ? "" : TelephoneNumberSort;
            ZipCodeSort = SortField != "ZipCode" ? "" : ZipCodeSort;

            switch (SortField)
            {
                case "Surname":
                    //SortDesc = (SurnameSort != "" && SurnameSort != null) ? !SortDesc : SortDesc;
                    SurnameSort = OrderCheck(SortDesc);
                    return SurnameSort;
                case "GivenName":
                    //SortDesc = (GivenNameSort != "" && GivenNameSort != null) ? !SortDesc : SortDesc;
                    GivenNameSort = OrderCheck(SortDesc);
                    return GivenNameSort;
                case "StreetAddress":
                    //SortDesc = (StreetAddressSort != "" && StreetAddressSort != null) ? !SortDesc : SortDesc;
                    StreetAddressSort = OrderCheck(SortDesc);
                    return StreetAddressSort;
                case "City":
                    //SortDesc = (CitySort != "" && CitySort != null) ? !SortDesc : SortDesc;
                    CitySort = OrderCheck(SortDesc);
                    return CitySort;
                case "State":
                    //SortDesc = (StateSort != "" && StateSort != null) ? !SortDesc : SortDesc;
                    StateSort = OrderCheck(SortDesc);
                    return StateSort;
                case "TelephoneNumber":
                    //SortDesc = (TelephoneNumberSort != "" && TelephoneNumberSort != null) ? !SortDesc : SortDesc;
                    TelephoneNumberSort = OrderCheck(SortDesc);
                    return TelephoneNumberSort;
                case "ZipCode":
                    // SortDesc = (ZipCodeSort != "" && ZipCodeSort != null) ? !SortDesc : SortDesc;
                    ZipCodeSort = OrderCheck(SortDesc);
                    return ZipCodeSort;
                default:
                    return String.Empty;
            }

        }

        /// <summary>
        /// Modal Section
        /// </summary>
        /// <param name="myUser"></param>
        #region Modal
        private async void EditUser(User myUser)
        {
            SelectedUser = myUser;
            UnModifiedUser = Comparer.DeepCopy<User>(SelectedUser);

            await JSRuntime.InvokeAsync<string>(
                     "appFunctions.showModal", "editUserModal", "");

            ChangeTab("User");
        }
        private async void ShowMap(User SelectedUser)
        {
            string szAddress = SelectedUser.StreetAddress + " " +
                SelectedUser.City + ", " + SelectedUser.ZipCode;
            string[] CoordinateArray = new string[]
            {
            SelectedUser.Longitude,
            SelectedUser.Latitude,
            szAddress
            };
            await JSRuntime.InvokeAsync<string>(
                      "appFunctions.showMap", CoordinateArray);
        }
        private async void ChangeTab(string tab)
        {
            await JSRuntime.InvokeAsync<string>(
                     "appFunctions.changeTabs", tab);
            if (tab == "mapDisplay")
            {
                decimal[] CoordinateArray = new decimal[]
                {
                Convert.ToDecimal(SelectedUser.Longitude),
                Convert.ToDecimal(SelectedUser.Latitude)
                                };
                await JSRuntime.InvokeAsync<string>(
                      "appFunctions.showMap", CoordinateArray);

            }
        }
        private async Task<List<User>> SaveUser(User SelectedUser)
        {
            //await JSRuntime.InvokeAsync<string>(
            //    "appfunctions.saveConfirmation", "");

            //await JSRuntime.InvokeAsync<string>(
            //    "appFunctions.hideEditUserModal", "");

            users = await UserService.SaveUserAsync(SortField, SortDesc, users, SelectedUser);

            await JSRuntime.InvokeAsync<string>(
                    "appFunctions.hideModal", "editUserModal");

            //ToggleSpinner(false);
            return users;
        }
        private void CloseModal()
        {
            JSRuntime.InvokeAsync<string>(
                "appFunctions.hideModal", "searchError");
        }
        private async Task<List<User>> CancelSaveUser(User SelectedUser)
        {
            if (!Comparer.DeepCompare(SelectedUser, UnModifiedUser))
            {
                users = await UserService.SaveUserAsync(SortField, SortDesc, users, UnModifiedUser);
            }


            SelectedUser = null;
            UnModifiedUser = null;

            await JSRuntime.InvokeAsync<string>(
                "appFunctions.hideModal", "EditUserModal");

            //ToggleSpinner(false);
            return users;
        }
        #endregion
    

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserService UserService { get; set; }
    }
}
#pragma warning restore 1591
