#pragma checksum "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "87fd119b3313e25d0cc62946bafc46e6caee3f0b"
// <auto-generated/>
#pragma warning disable 1591
namespace BlazorTest.Pages
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using BlazorTest.Shared;
    using Microsoft.AspNetCore.Components;
    using System;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/bloodtype")]
    public class BloodType : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
            builder.OpenElement(0, "h1");
            builder.AddAttribute(1, "style", "display:none;");
            builder.AddContent(2, ChildContent);
            builder.CloseElement();
            builder.AddMarkupContent(3, "\r\n");
            builder.OpenElement(4, "div");
            builder.AddAttribute(5, "style", "background-color:lightpink;display:" + (DisplayType));
            builder.AddMarkupContent(6, "\r\n    ");
            builder.AddMarkupContent(7, "<div>\r\n        <label><b><u>Blood Type Data:</u></b></label>\r\n    </div>\r\n    ");
            builder.OpenElement(8, "div");
            builder.AddAttribute(9, "style", "font-size:xx-small");
            builder.AddMarkupContent(10, "\r\n        ");
            builder.OpenElement(11, "table");
            builder.AddAttribute(12, "class", "table table-hover table-condensed table-bordered table-sm");
            builder.AddAttribute(13, "style", "font-size:xx-small");
            builder.AddMarkupContent(14, "\r\n            ");
            builder.OpenElement(15, "tbody");
            builder.AddMarkupContent(16, "\r\n                ");
            builder.AddMarkupContent(17, "<tr>\r\n                    <td><b>Female</b></td>\r\n                </tr>\r\n");
#line 16 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                 if (@_FemaleBloodTypes.Count > 0)
                {

#line default
#line hidden
            builder.AddContent(18, "                    ");
            builder.OpenElement(19, "tr");
            builder.AddMarkupContent(20, "\r\n");
#line 19 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                         foreach (var u in @_FemaleBloodTypes)
                        {

#line default
#line hidden
            builder.AddContent(21, "                            ");
            builder.OpenElement(22, "td");
            builder.OpenElement(23, "b");
            builder.AddContent(24, u.BloodType.Trim());
            builder.CloseElement();
            builder.CloseElement();
            builder.AddMarkupContent(25, "\r\n");
#line 22 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                        }

#line default
#line hidden
            builder.AddContent(26, "                    ");
            builder.CloseElement();
            builder.AddMarkupContent(27, "\r\n                    ");
            builder.OpenElement(28, "tr");
            builder.AddMarkupContent(29, "\r\n");
#line 25 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                         foreach (var u in @_FemaleBloodTypes)
                        {

#line default
#line hidden
            builder.AddContent(30, "                            ");
            builder.OpenElement(31, "td");
            builder.AddContent(32, u.BloodTypeTotalCount.ToString("#,##0"));
            builder.CloseElement();
            builder.AddMarkupContent(33, "\r\n");
#line 28 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                        }

#line default
#line hidden
            builder.AddContent(34, "                    ");
            builder.CloseElement();
            builder.AddMarkupContent(35, "\r\n");
#line 30 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                }

#line default
#line hidden
            builder.AddContent(36, "                ");
            builder.AddMarkupContent(37, "<tr>\r\n                    <td><b>Male</b></td>\r\n                </tr>\r\n");
#line 34 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                 if (@_MaleBloodTypes.Count > 0)
                {

#line default
#line hidden
            builder.AddContent(38, "                    ");
            builder.OpenElement(39, "tr");
            builder.AddMarkupContent(40, "\r\n");
#line 37 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                         foreach (var u in _MaleBloodTypes)
                        {

#line default
#line hidden
            builder.AddContent(41, "                        ");
            builder.OpenElement(42, "td");
            builder.OpenElement(43, "b");
            builder.AddContent(44, u.BloodType.Trim());
            builder.CloseElement();
            builder.CloseElement();
            builder.AddMarkupContent(45, "\r\n");
#line 40 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                        }

#line default
#line hidden
            builder.AddContent(46, "                    ");
            builder.CloseElement();
            builder.AddMarkupContent(47, "\r\n                    ");
            builder.OpenElement(48, "tr");
            builder.AddMarkupContent(49, "\r\n");
#line 43 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                         foreach (var u in @_MaleBloodTypes)
                        {

#line default
#line hidden
            builder.AddContent(50, "                            ");
            builder.OpenElement(51, "td");
            builder.AddContent(52, u.BloodTypeTotalCount.ToString("#,##0"));
            builder.CloseElement();
            builder.AddMarkupContent(53, "\r\n");
#line 46 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                        }

#line default
#line hidden
            builder.AddContent(54, "                    ");
            builder.CloseElement();
            builder.AddMarkupContent(55, "\r\n");
#line 48 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
                }

#line default
#line hidden
            builder.AddContent(56, "            ");
            builder.CloseElement();
            builder.AddMarkupContent(57, "\r\n        ");
            builder.CloseElement();
            builder.AddMarkupContent(58, "\r\n    ");
            builder.CloseElement();
            builder.AddMarkupContent(59, "\r\n");
            builder.CloseElement();
        }
        #pragma warning restore 1998
#line 54 "C:\Develop\GitHub\BlazorTest\Pages\BloodType.razor"
            
    [Serializable]
    public class BloodTypes
    {
        public string BloodType { get; set; }
        public int BloodTypeTotalCount { get; set; }
    }
    public List<BloodTypes> bloodTypes = new List<BloodTypes>();

    [Parameter]
    private RenderFragment ChildContent { get; set; }

    List<BloodTypes> _FemaleBloodTypes = new List<BloodTypes>();
    [Parameter]
    public IReadOnlyList<BloodTypes> FemaleBloodTypes
    {
        get { return _FemaleBloodTypes; }
        set
        {
            if (value.Count > 0)
            {
                _FemaleBloodTypes = value.ToList();
                onFemaleBloodTypes();
            }
        }
    }
    List<BloodTypes> _MaleBloodTypes = new List<BloodTypes>();
    [Parameter]
    public IReadOnlyList<BloodTypes> MaleBloodTypes
    {
        get { return _MaleBloodTypes; }
        set
        {
            if (value.Count > 0)
            {
                _MaleBloodTypes = value.ToList();
                onMaleBloodTypes();
            }
        }
    }

    List<BloodTypes> onMaleBloodTypes()
    {
        ToggleDisplay(true);
        return _MaleBloodTypes.ToList();
    }
    List<BloodTypes> onFemaleBloodTypes()
    {
        ToggleDisplay(true);
        return _FemaleBloodTypes.ToList();
    }

    string DisplayType { get; set; }

    private string ToggleDisplay(bool spinnerOn)
    {
        DisplayType = (spinnerOn) ? "block;" : "none;";
        return DisplayType;
    }

    protected override void OnInit()
    {
        ToggleDisplay(false);
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
