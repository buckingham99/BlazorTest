#pragma checksum "C:\Develop\GitHub\BlazorTest\Pages\DataGrid.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1f6365fcc3b529e42f265189fda6f8de13b9b408"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorTest.Pages
{
    #line hidden
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using BlazorTest.Shared;
    using BlazorTest.Models;
    using BlazorTest.Services;
    using BlazorTest.Helpers;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Microsoft.AspNetCore.Components;
    using System.Reflection;
    using System;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    public class DataGrid : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 319 "C:\Develop\GitHub\BlazorTest\Pages\DataGrid.razor"
            
    private Gender GenderComponent = new Gender();
    private BloodType BloodTypeComponent = new BloodType();
    private CreditCard CreditCardComponent = new CreditCard();
    private Zodiac ZodiacComponent = new Zodiac();


    [Parameter] EventCallback<string> OnSortLinkClicked { get; set; }
    [Parameter] EventCallback<string> OnSearchError { get; set; }
    [Parameter] EventCallback<string> OnUserCount { get; set; }
    [Parameter] EventCallback<string> OnSearchText { get; set; }

    List<Gender.GenderTypes> GenderTypesList = new List<Gender.GenderTypes>();
    List<BloodType.BloodTypes> BloodTypesList = new List<BloodType.BloodTypes>();
    List<Zodiac.ZodiacTypes> ZodiacTypesList = new List<Zodiac.ZodiacTypes>();

    List<BloodType.BloodTypes> femaleBloodTypes = new List<BloodType.BloodTypes>();
    List<BloodType.BloodTypes> maleBloodTypes = new List<BloodType.BloodTypes>();

    List<CreditCard.CardTypes> maleCardTypes = new List<CreditCard.CardTypes>();
    List<CreditCard.CardTypes> femaleCardTypes = new List<CreditCard.CardTypes>();

    private int currentPage  { get; set; } = 1;
    private int pageSize = 12;

    private List<User> users = new List<User>();
    private List<User> displayUsers = new List<User>();
    private List<User> displayUsersSource = new List<User>();
    private User UnModifiedUser = new User();
    private User SelectedUser = new User();

    private bool SortDesc { get; set; }
    private string SurnameSort { get; set; }
    private string GivenNameSort { get; set; }
    private string StreetAddressSort { get; set; }
    private string CitySort { get; set; }
    private string StateSort { get; set; }
    private string ZipCodeSort { get; set; }
    private string TelephoneNumberSort { get; set; }
    private string SearchErrorText { get; set; }
    private string LoaderDisplayType { get; set; } = "block;";
    private int TotalPages { get; set; }

    public string MaleCount { get; set; } = "0";
    public string FemaleCount { get; set; } = "0";

    private int _namesCount = 0;
    public int namesCount
    {
        get { return _namesCount; }
        set
        {
            if (value != 0)
            {
                ToggleSpinner(true);

                if (value != _namesCount)
                {
                    OnUserCount.InvokeAsync(value.ToString());
                }
                _namesCount = value;
                ToggleSpinner(false);
            }
        }
    }
    private List<int> btnlist = new List<int>();

    public string _SearchString { get; set; }
    [Parameter]
    public string SearchString
    {
        get { return _SearchString; }
        set
        {
            if (value != null)
            {
                _SearchString = value;
                SearchData(value);
            }
        }
    }

    public string _SortField { get; set; } = "Surname";
    [Parameter]
    public string SortField
    {
        get { return _SortField; }
        set
        {
            if (value != "" && value != null && users.Count > 0)
            {
                _SortField = value;
                SortData(value);
            }
        }
    }
    private int checkPageInt(int iCount)
    {
        int intReturn = -1;
        int[] tmpCount = new int[] {10, 20, 30, 40,50,60,70,80,100,200,500,750,1000,1500};
        foreach (var item in tmpCount)
        {
            if (item == iCount)
            {
                intReturn = iCount;
                break;
            }
        }
        return intReturn;
    }


    protected override void OnInit()
    {
        SortDesc = true;
        ToggleSpinner(true);

    }
    protected override void OnAfterRender()
    {
        if (users.Count == 0)
        {
            users = UserService.GetNamesData(SortField == "" ? "Surname" : SortField, SortDesc);
            ShowBloodCount("users");
            ShowGenderCount("users");
            ShowCardCount("users");
            ShowZodiacCount("users");
            SortLinkClicked("Surname");

            var zodiac = UserService.users.GroupBy(x => new { x.Gender, x.TropicalZodiac })
                .Select(r => new
                {
                    TropicalZodiac = r.Key.TropicalZodiac.ToUpper().Trim(),
                    Gender = r.Key.Gender.ToUpper().Trim(),
                    Count = r.Count()
                })
                .OrderBy(r => r.Gender)
                .OrderBy(r => r.TropicalZodiac).ToList();


            ToggleSpinner(false);
        }
    }

    private void ShowGenderCount (string szSender)
    {
        if (szSender == "users")
        {
            GenderComponent.genderTypesList = UserService.users.GroupBy(x => x.Gender)
                .Select(r => new Gender.GenderTypes
                {
                    GenderType = r.Key,
                    GenderTypeTotalCount = r.Count()
                }).OrderBy(r => r.GenderType).ToList();
        }
        else
        {
            GenderComponent.genderTypesList = displayUsersSource.GroupBy(x => x.Gender)
                .Select(r => new Gender.GenderTypes
                {
                    GenderType = r.Key,
                    GenderTypeTotalCount = r.Count()
                }).OrderBy(r => r.GenderType).ToList();
        }
        ShouldRender();
    }
    private void ShowBloodCount(string szSender)
    {
        if (szSender == "users")
        {
            BloodTypeComponent.bloodTypesList = UserService.users.GroupBy(x => new { x.Gender, x.BloodType })
                .Select(r => new BloodType.BloodTypes
                {
                    BloodType = r.Key.BloodType.ToUpper().Trim(),
                    Gender = r.Key.Gender.ToUpper().Trim(),
                    BloodTypeTotalCount = r.Count()
                })
                .OrderBy(r => r.Gender)
                .OrderBy(r => r.BloodType).ToList();
        }
        else
        {
            BloodTypeComponent.bloodTypesList = displayUsersSource.GroupBy(x => new { x.Gender, x.BloodType })
                .Select(r => new BloodType.BloodTypes
                {
                    BloodType = r.Key.BloodType,
                    Gender = r.Key.Gender,
                    BloodTypeTotalCount = r.Count()
                })
                .OrderBy(r => r.Gender)
                .OrderBy(r => r.BloodType).ToList();
        }
        ShouldRender();
    }
    private void ShowCardCount(string szSender)
    {
        if (szSender == "users")
        {
            CreditCardComponent.FemaleCardTypes = UserService.users.Where(x => x.Gender.ToLower() == "female")
                .GroupBy(x => x.CCType)
                .Select(r => new CreditCard.CardTypes
                {
                    CardType = r.Key,
                    CardTypeTotalCount = r.Count()
                }).OrderBy(r=>r.CardType).ToList();

            CreditCardComponent.MaleCardTypes = UserService.users.Where(x => x.Gender.ToLower() == "male")
                .GroupBy(x => x.CCType)
                .Select(r => new CreditCard.CardTypes
                {
                    CardType = r.Key,
                    CardTypeTotalCount = r.Count()
                }).OrderBy(r=>r.CardType).ToList();
        }
        else
        {
            CreditCardComponent.FemaleCardTypes = displayUsersSource.Where(x => x.Gender.ToLower() == "female")
                .GroupBy(x => x.CCType)
                .Select(r => new CreditCard.CardTypes
                {
                    CardType = r.Key,
                    CardTypeTotalCount = r.Count()
                }).OrderBy(r=>r.CardType).ToList();

            CreditCardComponent.MaleCardTypes = displayUsersSource.Where(x => x.Gender.ToLower() == "male")
                .GroupBy(x => x.CCType)
                .Select(r => new CreditCard.CardTypes
                {
                    CardType = r.Key,
                    CardTypeTotalCount = r.Count()
                }).OrderBy(r=>r.CardType).ToList();
        }
        ShouldRender();
    }

    private void ShowZodiacCount(string szSender)
    {
        if (szSender == "users")
        {
            ZodiacComponent.zodiacTypesList = UserService.users.GroupBy(x => new { x.Gender, x.TropicalZodiac })
                .Select(r => new Zodiac.ZodiacTypes
                {
                    Gender = r.Key.Gender.ToUpper().Trim(),
                    TropicalZodiac = r.Key.TropicalZodiac.ToUpper().Trim(),
                    ZodiacTypeTotalCount = r.Count()
                })
                .OrderBy(r => r.Gender)
                .OrderBy(r => r.TropicalZodiac).ToList();
        }
        else
        {
            ZodiacComponent.zodiacTypesList = displayUsersSource.GroupBy(x => new { x.Gender, x.TropicalZodiac })
                .Select(r => new Zodiac.ZodiacTypes
                {
                    TropicalZodiac = r.Key.TropicalZodiac.ToUpper().Trim(),
                    Gender = r.Key.Gender.ToUpper().Trim(),
                    ZodiacTypeTotalCount = r.Count()
                })
                .OrderBy(r => r.Gender)
                .OrderBy(r => r.TropicalZodiac).ToList();
        }
        ShouldRender();
    }

    private void ForceRecordCountChange(string RecordsToChange)
    {
        ToggleSpinner(true);
        displayUsersSource.Clear();
        users.Clear();

        users = UserService.users;
        namesCount = users.Count;

        displayUsers = UserService.users.OrderByDescending(s => s.GetType()
        .GetProperty(SortField)
        .GetValue(s))
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize).ToList();
        recalcPageButtons(users.Count);

        ShowBloodCount("users");
        ShowCardCount("users");
        ShowGenderCount("users");
        ShowZodiacCount("users");
        ToggleSpinner(false);
    }

    private string ToggleSpinner(bool spinnerOn)
    {
        LoaderDisplayType = (spinnerOn) ? "block;" : "none;";
        return LoaderDisplayType;
    }
    void ChangePage(int newPage)
    {
        currentPage = newPage;
        if (SearchString == "" || SearchString == null)
        {
            SortData(SortField);
        }
        else
        {
            SearchData(SearchString);
            SortData(SortField);
        }
    }

    void SortLinkClicked(string dataToSend)
    {
        ToggleSpinner(true);
        SortDesc = !SortDesc;
        OnSortLinkClicked.InvokeAsync(dataToSend);
        ToggleSpinner(false);
    }

    async Task SearchError()
    {
        await Task.FromResult(
            OnSearchError.InvokeAsync(SearchErrorText));
        SearchString = "";
    }
    async Task UserCountUpdate(int myCount)
    {
        await Task.FromResult
            (
                OnUserCount.InvokeAsync(myCount.ToString())
            );
    }

    public void SortData(string SortField)
    {
        ToggleSpinner(true);
        if (UserService.users.Count > 0 && (SearchString == "" || SearchString == null))
        {
            ToggleSpinner(true);
            CalcIconDirection(SortField);

            if (SortDesc)
            {
                displayUsers = UserService.users
                .OrderByDescending(x => x.GetType().GetProperty(SortField).GetValue(x)
                .ToString())
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
            }
            else
            {
                displayUsers = UserService.users
                .OrderBy(x => x.GetType().GetProperty(SortField).GetValue(x)
                .ToString())
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
            }
            displayUsersSource = UserService.users
                .OrderBy(x => x.GetType().GetProperty(SortField).GetValue(x)
                .ToString())
                .ToList();
        }
        if (SearchString != "" && SearchString != null)
        {
            namesCount = UserService.users.Where(s => s.GetType()
                    .GetProperty(SortField).GetValue(s).ToString().ToLower()
                    .StartsWith(SearchString.ToLower())).Count();

            ShowBloodCount("displayUsers");
            ShowCardCount("displayUsers");
            ShowGenderCount("displayUsers");
            ShowZodiacCount("displayUsers");
            recalcPageButtons(namesCount);
        }
        if ((SearchString == "" || SearchString == null) && users.Count > 0)
        {
            recalcPageButtons(UserService.users.Count);

            ShowBloodCount("users");
            ShowCardCount("users");
            ShowGenderCount("users");
            ShowZodiacCount("users");
            namesCount = users.Count;
        }

        ToggleSpinner(false);

    }
    public async Task ShowError(string errMessage)
    {
        await Task.FromResult(JSRuntime.InvokeAsync<string>(
                     "appFunctions.showModal", "searchError", "Search Text: " +
                     SearchString + " was not found"));

    }
    public List<int> recalcPageButtons(int TotalRecords)
    {
        int _myCount = 0;
        if (TotalRecords > 0)
        {
            _myCount = TotalRecords > 0 ? (int)Math.Ceiling(decimal.Divide(TotalRecords, pageSize)) : 0;
            btnlist.Clear();
            for (int i = 1; i < _myCount + 1; i++)
            {
                btnlist.Add(i);
            }
        }
        return btnlist;
    }
    public void SearchData(string SearchString)
    {
        int displayCount = 0;
        if (users.Count > 0)
        {
            ToggleSpinner(true);
            CalcIconDirection(SortField);

            if (SearchString.Length > 0)
            {
                if (SortDesc)
                {
                    List<User> tmp = UserService.users.Where(s => s.GetType()
                    .GetProperty(SortField).GetValue(s).ToString().ToLower()
                    .StartsWith(SearchString.ToLower()))
                    .OrderByDescending(x => x.GetType()
                    .GetProperty(SortField).GetValue(x)).ToList();
                    if (tmp.Count > 0)
                    {
                        if ((currentPage - 1) * pageSize < tmp.Count())
                        {
                            displayUsers = tmp.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
                        }
                        else
                        {
                            currentPage = 1;
                            displayUsers = tmp.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
                        }
                    }
                }
                else
                {
                    List<User> tmp = UserService.users.Where(s => s.GetType()
                    .GetProperty(SortField).GetValue(s).ToString().ToLower()
                    .StartsWith(SearchString.ToLower()))
                    .OrderBy(x => x.GetType()
                    .GetProperty(SortField).GetValue(x)).ToList();
                    if (tmp.Count > 0)
                    {
                        if ((currentPage - 1) * pageSize < tmp.Count())
                        {
                            displayUsers = tmp.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
                        }
                        else
                        {
                            currentPage = 1;
                            displayUsers = tmp.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
                        }
                    }
                }
                displayUsersSource = UserService.users.Where(s => s.GetType()
                    .GetProperty(SortField).GetValue(s).ToString().ToLower()
                    .StartsWith(SearchString.ToLower()))
                    .OrderBy(x => x.GetType()
                    .GetProperty(SortField).GetValue(x)).ToList();

                namesCount = displayUsersSource.Count;
                displayCount = displayUsersSource.Count();

                ShowBloodCount("displayUsers");
                ShowGenderCount("displayUsers");
                ShowCardCount("displayUsers");
                ShowZodiacCount("displayUsers");
            }
            if (SearchString.Length == 0)
            {
                if (SortDesc)
                {
                    displayUsers = UserService.users
                    .OrderByDescending(x => x.GetType().GetProperty(SortField).GetValue(x)
                    .ToString())
                    .Skip((currentPage - 1) * pageSize)
                    .Take(pageSize)
                    .ToList();
                }
                else
                {
                    displayUsers = UserService.users
                    .OrderBy(x => x.GetType().GetProperty(SortField).GetValue(x)
                    .ToString())
                    .Skip((currentPage - 1) * pageSize)
                    .Take(pageSize)
                    .ToList();
                }
                displayCount = UserService.users.Count;
                namesCount = displayCount;
                ShowBloodCount("users");
                ShowGenderCount("users");
                ShowCardCount("users");
                ShowZodiacCount("users");
            }
        }
        recalcPageButtons(displayCount);
        ToggleSpinner(false);
    }
    static string OrderCheck(bool SortDesc)
    {
        if (SortDesc)
        {
            return "oi oi-arrow-thick-bottom";
        }
        else
        {
            return "oi oi-arrow-thick-top";
        }
    }
    private string CalcIconDirection(string SortField)
    {
        SurnameSort = SortField != "Surname" ? "" : SurnameSort;
        GivenNameSort = SortField != "GivenName" ? "" : GivenNameSort;
        StreetAddressSort = SortField != "StreetAddress" ? "" : StreetAddressSort;
        CitySort = SortField != "City" ? "" : CitySort;
        StateSort = SortField != "State" ? "" : StateSort;
        TelephoneNumberSort = SortField != "TelephoneNumber" ? "" : TelephoneNumberSort;
        ZipCodeSort = SortField != "ZipCode" ? "" : ZipCodeSort;

        switch (SortField)
        {
            case "Surname":
                SurnameSort = OrderCheck(SortDesc);
                return SurnameSort;
            case "GivenName":
                GivenNameSort = OrderCheck(SortDesc);
                return GivenNameSort;
            case "StreetAddress":
                StreetAddressSort = OrderCheck(SortDesc);
                return StreetAddressSort;
            case "City":
                CitySort = OrderCheck(SortDesc);
                return CitySort;
            case "State":
                StateSort = OrderCheck(SortDesc);
                return StateSort;
            case "TelephoneNumber":
                TelephoneNumberSort = OrderCheck(SortDesc);
                return TelephoneNumberSort;
            case "ZipCode":
                ZipCodeSort = OrderCheck(SortDesc);
                return ZipCodeSort;
            default:
                return String.Empty;
        }

    }

    /// <summary>
    /// Modal Section
    /// </summary>
    /// <param name="myUser"></param>
    #region Modal
    private async void EditUser(User myUser)
    {
        SelectedUser = myUser;
        UnModifiedUser = Comparer.DeepCopy<User>(SelectedUser);

        await JSRuntime.InvokeAsync<string>(
                 "appFunctions.showModal", "editUserModal", "");

        ChangeTab("User");
    }
    private async void ShowMap(User SelectedUser)
    {
        string szAddress = SelectedUser.StreetAddress + " " +
            SelectedUser.City + ", " + SelectedUser.ZipCode;
        string[] CoordinateArray = new string[]
        {
            SelectedUser.Longitude.ToString(),
            SelectedUser.Latitude.ToString(),
            szAddress
        };
        await JSRuntime.InvokeAsync<string>(
                  "appFunctions.showMap", CoordinateArray);
    }
    private async void ChangeTab(string tab)
    {
        await JSRuntime.InvokeAsync<string>(
                 "appFunctions.changeTabs", tab);
        if (tab == "mapDisplay")
        {
            decimal[] CoordinateArray = new decimal[]
            {
                Convert.ToDecimal(SelectedUser.Longitude),
                Convert.ToDecimal(SelectedUser.Latitude)
                            };
            await JSRuntime.InvokeAsync<string>(
                  "appFunctions.showMap", CoordinateArray);

        }
    }
    private async Task<List<User>> SaveUser(User SelectedUser)
    {
        //await JSRuntime.InvokeAsync<string>(
        //    "appfunctions.saveConfirmation", "");

        //await JSRuntime.InvokeAsync<string>(
        //    "appFunctions.hideEditUserModal", "");

        users = await UserService.SaveUserAsync(SortField, SortDesc, users, SelectedUser);

        await JSRuntime.InvokeAsync<string>(
                "appFunctions.hideModal", "editUserModal");

        //ToggleSpinner(false);
        return users;
    }
    private void CloseModal()
    {
        JSRuntime.InvokeAsync<string>(
            "appFunctions.hideModal", "searchError");
    }
    private async Task<List<User>> CancelSaveUser(User SelectedUser)
    {
        if (!Comparer.DeepCompare(SelectedUser, UnModifiedUser))
        {
            users = await UserService.SaveUserAsync(SortField, SortDesc, users, UnModifiedUser);
        }


        SelectedUser = null;
        UnModifiedUser = null;

        await JSRuntime.InvokeAsync<string>(
            "appFunctions.hideModal", "EditUserModal");

        //ToggleSpinner(false);
        return users;
    }
    #endregion

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserService UserService { get; set; }
    }
}
#pragma warning restore 1591
