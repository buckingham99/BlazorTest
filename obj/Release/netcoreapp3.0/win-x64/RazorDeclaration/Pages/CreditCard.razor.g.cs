#pragma checksum "C:\Develop\GitHub\BlazorTest\Pages\CreditCard.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a2ebeab5758a488929515259985aa67c11995980"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorTest.Pages
{
    #line hidden
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using BlazorTest.Shared;
    using Microsoft.AspNetCore.Components;
    using System;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/creditcard")]
    public class CreditCard : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 54 "C:\Develop\GitHub\BlazorTest\Pages\CreditCard.razor"
            
    [Serializable]
    public class CardTypes
    {
        public string CardType { get; set; }
        public int CardTypeTotalCount { get; set; }
    }
    public List<CardTypes> cardTypes = new List<CardTypes>();

    [Parameter]
    private RenderFragment ChildContent { get; set; }

    List<CardTypes> _FemaleCardTypes = new List<CardTypes>();
    [Parameter]
    public IReadOnlyList<CardTypes> FemaleCardTypes
    {
        get { return _FemaleCardTypes; }
        set
        {
            if (value.Count > 0)
            {
                _FemaleCardTypes = value.ToList();
                onFemaleCardTypes();
            }
        }
    }
    List<CardTypes> _MaleCardTypes = new List<CardTypes>();
    [Parameter]
    public IReadOnlyList<CardTypes> MaleCardTypes
    {
        get { return _MaleCardTypes; }
        set
        {
            if (value.Count > 0)
            {
                _MaleCardTypes = value.ToList();
                onMaleCardTypes();
            }
        }
    }

    List<CardTypes> onMaleCardTypes()
    {
        ToggleDisplay(true);
        return _MaleCardTypes.ToList();
    }
    List<CardTypes> onFemaleCardTypes()
    {
        ToggleDisplay(true);
        return _FemaleCardTypes.ToList();
    }

    string DisplayType { get; set; }

    private string ToggleDisplay(bool spinnerOn)
    {
        DisplayType = (spinnerOn) ? "block;" : "none;";
        return DisplayType;
    }

    protected override void OnInit()
    {
        ToggleDisplay(false);
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
