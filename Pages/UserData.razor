@page "/userdata"
@using BlazorTest.Models;
@using BlazorTest.Services;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using  System;
@inject UserService userService;
@inject IJSRuntime JSRuntime;

    <div class="container">
        <div class="row">
            <h3>Test User Data Page</h3>
            <p>This component demonstrates fetching & editing data from a service via local CSV or JSON file using a HTML Grid.</p>
            <p>Click on a user to edit data and view an OpenLayers Map of their location. </p>
            <p>
                Please note that your data will not be persisted between sessions, but a Database can easily be attached
                to the UserService Class.
            </p>
        </div>
        <div class="container" style="border: 1px solid black;">
            <div class="container">
                <div class="row">
                    <h5>Parent Component</h5> &nbsp; &nbsp; <label>  UserCount = @UsersCount </label>
                </div>
            </div>
            <div class="row">
                <div class="input-group input-group-md" style="line-height: 0.5">
                    <form class="form-group">
                        <div class="input-group-sm">
                            <input type="search" class="form-control form-control-sm" id="SearchText"
                                   name="SearchText" bind-value-oninput="@ParentSearch"
                                   aria-label="search" aria-describedby="basic-addon1"
                                   placeholder="@PlaceHolderSort" />
                        </div>
                        <div>
                            <br />
                        </div>
                        <div class="input-group-sm">
                            <fieldset>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" id="lastName"
                                           name="searchGroup" checked="@(SurnameChecked == 1)" onchange="@(() => ParentSort = "Surname")" />
                                    <label class="radio-inline" for="lastName">Last Name</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" id="givenName"
                                           name="searchGroup" checked=@(GivenNameChecked == 1) onchange="@(() => ParentSort = "GivenName")" />
                                    <label class="radio-inline" for="givenName">First Name</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" id="address"
                                           name="searchGroup" checked=@(StreetAddressChecked == 1) onchange="@(() => ParentSort = "StreetAddress")" />
                                    <label class="radio-inline" for="address">Address</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" id="city"
                                           name="searchGroup" checked=@(CityChecked == 1) onchange="@(() => ParentSort = "City")" />
                                    <label class="radio-inline" for="city">City</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" id="state"
                                           name="searchGroup" checked=@(StateChecked == 1) onchange="@(() => ParentSort = "State")" />
                                    <label class="radio-inline" for="state">State</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" id="zip"
                                           name="searchGroup" checked=@(ZipCodeChecked == 1) onchange="@(() => ParentSort = "ZipCode")" />
                                    <label class="radio-inline" for="zip">Zip Code</label>
                                </div>
                                <div class="custom-control custom-radio custom-control-inline">
                                    <input type="radio" id="phone"
                                           name="searchGroup" checked=@(TelephoneNumberChecked == 1) onchange="@(() => ParentSort = "TelephoneNumber")" />
                                    <label class="radio-inline" for="phone">Phone</label>
                                </div>
                            </fieldset>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="row"></div>
        @*// Parameters Child Side -- Parent Side*@
        <DataGrid
            SortField="@_ParentSort"
            OnSortLinkClicked="@OnSortClick"
            OnSearchError="@SearchErrorClear"
            OnUserCount="@UserCountChange"
            SearchString="@_ParentSearch">
        </DataGrid>
    </div>
    @functions {

        private int SurnameChecked { get; set; }
        private int GivenNameChecked { get; set; }
        private int StreetAddressChecked { get; set; }
        private int CityChecked { get; set; }
        private int StateChecked { get; set; }
        private int ZipCodeChecked { get; set; }
        private int TelephoneNumberChecked { get; set; }

        private string newSort  { get; set; }
        public int UsersCount { get; set; }
        public string PlaceHolderSort { get; set; } = "Search Last Name ...";


        public string _ParentSort { get; set; } = "Surname";

        public string ParentSort
        {
            get { return _ParentSort; }
            set
            {
                if (value != null)
                {
                    _ParentSort = value;
                    ChangeSearchPlaceHolder();
                    ClickListButton(value);
                    SortChildComponent();
                }
            }
        }
        public string _ParentSearch { get; set; }
        public string ParentSearch
        {
            get { return _ParentSearch; }
            set
            {
                _ParentSearch = value;
                SearchChildComponent();
            }
        }
        public string SortChildComponent()
        {
            return _ParentSort;
        }
        public string SearchChildComponent()
        {
            return _ParentSearch;
        }
        public string ChangeSearchPlaceHolder()
        {
            switch (_ParentSort)
            {
                case "Surname":
                    PlaceHolderSort = "Search Last Name ...";
                    break;
                case "GivenName":
                    PlaceHolderSort = "Search First Name ...";
                    break;
                case "StreetAddress":
                    PlaceHolderSort = "Search Address ...";
                    break;
                case "City":
                    PlaceHolderSort = "Search City ...";
                    break;
                case "State":
                    PlaceHolderSort = "Search State ...";
                    break;
                case "ZipCode":
                    PlaceHolderSort = "Search Zip Code ...";
                    break;
                case "TelephoneNumber":
                    PlaceHolderSort = "Search Telephone Number ...";
                    break;
                default:
                    break;
            }
            return PlaceHolderSort;

        }
        private int ClickListButton(string returnedString)
        {
            SurnameChecked = 0;
            GivenNameChecked = 0;
            StreetAddressChecked = 0;
            CityChecked = 0;
            StateChecked = 0;
            TelephoneNumberChecked = 0;
            ZipCodeChecked = 0;

            switch (returnedString)
            {
                case "Surname":
                    SurnameChecked = 1;
                    return SurnameChecked;
                case "GivenName":
                    GivenNameChecked = 1;
                    return GivenNameChecked;
                case "StreetAddress":
                    StreetAddressChecked = 1;
                    return StreetAddressChecked;
                case "City":
                    CityChecked = 1;
                    return CityChecked;
                case "State":
                    StateChecked = 1;
                    return StateChecked;
                case "TelephoneNumber":
                    TelephoneNumberChecked = 1;
                    return TelephoneNumberChecked;
                case "ZipCode":
                    ZipCodeChecked = 1;
                    return ZipCodeChecked;
                default:
                    return 0;
            }

        }
        void OnSortClick(string newSort)
        {
            ClickListButton(newSort);
            ChangeSearchPlaceHolder();
            _ParentSort = newSort;
        }

        void SearchErrorClear(string SearchError)
        {
            ParentSearch = "";
            _ParentSearch = "";
            StateHasChanged();
        }

        private void UserCountChange(string _UserCount)
        {
            ReturnedUserCount(_UserCount);
        }
        private int ReturnedUserCount(string _userCount)
        {
            UsersCount = Convert.ToInt32(_userCount.ToString());
            return UsersCount;
        }


    }
