@using BlazorTest.Data;
@using BlazorTest.Helpers;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using Microsoft.AspNetCore.Components;
@inject NamesService NamesService;
@inject IJSRuntime JSRuntime;


<div class="container">
    <div class="row">
        <h3>Users DataGrid Component</h3>
    </div>
    <div class="row">
        <b>Users count:  (@namesCount)</b>
    </div>
</div>
<div class="row">
    <div class="loader" bind="@LoaderDisplayType" style="display:@LoaderDisplayType"></div>
    <div class="tableFixHead" style="height: 600px;">

        <table>
            <thead>
                <tr class="table-hover">
                    <th>

                        <div></div>
                    </th>
                    <th>
                        <div><a href="javascript:void(0)" title="Sort by Last Name" onclick="@( () => SortData("Surname"))"><b>Last Name</b></a> <span class="@SurnameSort"></span></div>
                    </th>
                    <th>
                        <div><a href="javascript:void(0)" title="Sort by First Name" onclick="@( () => SortData("GivenName"))"><b>First Name</b></a> <span class="@GivenNameSort"></span></div>
                    </th>
                    <th>
                        <div><a href="javascript:void(0)" title="Sort by Street Address" onclick="@( () => SortData("StreetAddress"))"><b>Address</b></a> <span class="@StreetAddressSort"></span></div>
                    </th>
                    <th>
                        <div><a href="javascript:void(0)" title="Sort by City" onclick="@( () => SortData("City"))"><b>City</b></a> <span class="@CitySort"></span></div>
                    </th>
                    <th>
                        <div><a href="javascript:void(0)" title="Sort by State" onclick="@( () => SortData("State"))"><b>State</b></a> <span class="@StateSort"></span></div>
                    </th>
                    <th>
                        <div><a href="javascript:void(0)" title="Sort by Zip Code" onclick="@( () => SortData("ZipCode"))"><b>Zip</b></a> <span class="@ZipCodeSort"></span></div>
                    </th>
                    <th>
                        <div><a href="javascript:void(0)" title="Sort by Telephone Number" onclick="@( () => SortData("TelephoneNumber"))"><b>Phone</b></a> <span class="@PhoneSort"></span></div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (users != null)
                {
                    @foreach (var u in @users)
                    {
                        <tr onclick="@( () => EditUser(@u))" title="Click to Edit">
                            <td><a href="javascript:void(0);" onclick="@( () => EditUser(@u))"><span class="oi oi-magnifying-glass"></span></a></td>
                            <td>@u.Surname</td>
                            <td>@u.GivenName</td>
                            <td>@u.StreetAddress</td>
                            <td>@u.City</td>
                            <td>@u.State</td>
                            <td>@u.ZipCode.ToString()</td>
                            <td>@u.TelephoneNumber</td>
                        </tr>
                    }
                }
            </tbody>
        </table>

    </div>
</div>

<!-- Modal -->
@if (SelectedUser != null)
{
    <div class="container">
        <div id="editUserModal" class="modal col-xs-6 col-sm-12 col-md-12" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered col-md-12 col-md-offset-3" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 id="modalTitle" class="modal-title">Edit User: <b><u>@(SelectedUser.GivenName + " " + SelectedUser.Surname)</u></b></h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div id="modalBody" class="modal-body">
                        <div class="panel-body">
                            <form role="form">
                                <div class="row">
                                    <div class="col-xs-6 col-sm-6 col-md-6">
                                        <div class="form-group">
                                            <label for="first_name">First Name</label>
                                            <input type="text" name="first_name" id="first_name" class="form-control input-sm" bind-value-onchange="@SelectedUser.GivenName" placeholder="First Name" />
                                        </div>
                                    </div>
                                    <div class="col-xs-6 col-sm-6 col-md-6">
                                        <div class="form-group">
                                            <label for="last_name">Last Name</label>
                                            <input type="text" name="last_name" id="last_name" class="form-control input-sm" bind-value-onchange="@SelectedUser.Surname" value="@SelectedUser.Surname" placeholder="Last Name" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-xs-6 col-sm-12 col-md-12">
                                        <div class="form-group">
                                            <label for="address">Street Address</label>
                                            <input type="text" name="address" id="streetAddress" class="form-control input-sm" bind-value-onchange="@SelectedUser.StreetAddress" placeholder="Street Address" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-xs-6 col-sm-6 col-md-6">
                                        <div class="form-group">
                                            <label for="city">City</label>
                                            <input type="text" name="city" id="city" class="form-control input-sm" bind-value-onchange="@SelectedUser.City" placeholder="City" />
                                        </div>
                                    </div>
                                    <div class="col-xs-6 col-sm-6 col-md-6">
                                        <div class="form-group">
                                            <label for="state">State</label>
                                            <input type="text" name="state" id="state" class="form-control input-sm" bind-value-onchange="@SelectedUser.State" placeholder="State" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-xs-6 col-sm-6 col-md-6">
                                        <div class="form-group">
                                            <label for="zipCode">Zip Code</label>
                                            <input type="text" name="zipCode" id="zipCode" class="form-control input-sm" bind-value-onchange="@SelectedUser.ZipCode" placeholder="Zip Code" />
                                        </div>
                                    </div>
                                    <div class="col-xs-6 col-sm-6 col-md-6">
                                        <div class="form-group">
                                            <label for="telephone">Telephone</label>
                                            <input type="tel" name="telephone" id="telephone" class="form-control input-sm" bind-value-onchange="@SelectedUser.TelephoneNumber" placeholder="Telephone #" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-xs-6 col-sm-6 col-md-6">
                                        <div class="form-group">
                                            <label for="zodiacSign">Zodiac Sign</label>
                                            <input type="text" name="zodiacSign" id="zodiacSign" class="form-control input-sm" bind-value-onchange="@SelectedUser.TropicalZodiac" placeholder="Zodiac Sign" />
                                        </div>
                                    </div>
                                    <div class="col-xs-6 col-sm-6 col-md-6">
                                        <div class="form-group">
                                            <label for="birthdate">Birth Day</label>
                                            <input type="text" name="birthdate" id="birthdate" class="form-control input-sm" bind-value-onchange="@SelectedUser.Birthday" placeholder="Birthday" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-xs-6 col-sm-12 col-md-12">
                                        <div class="form-group">
                                            <label for="company">Company</label>
                                            <input type="text" name="company" id="company" class="form-control input-sm" bind-value-onchange="@SelectedUser.Company" placeholder="Company" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-xs-6 col-sm-12 col-md-12">
                                        <div class="form-group">
                                            <label for="occupation">Occupation</label>
                                            <input type="text" name="occupation" id="occupation" class="form-control input-sm" bind-value-onchange="@SelectedUser.Occupation" placeholder="Occupation" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-xs-6 col-sm-6 col-md-6">
                                        <div class="form-group">
                                            <label for="username">User Name</label>
                                            <input type="text" name="username" id="username" class="form-control input-sm" bind-value-onchange="@SelectedUser.Username" placeholder="User Name" />
                                        </div>
                                    </div>
                                    <div class="col-xs-6 col-sm-6 col-md-6">
                                        <div class="form-group">
                                            <label for="password">Password</label>
                                            <input type="text" name="password" id="password" class="form-control input-sm" bind-value-onchange="@SelectedUser.Password" placeholder="Password" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-xs-6 col-sm-6 col-md-6">
                                        <div class="form-group">
                                            <label for="bloodType">Blood Type</label>
                                            <input type="text" name="bloodType" id="bloodType" class="form-control input-sm" bind-value-onchange="@SelectedUser.BloodType" placeholder="Blood Type" />
                                        </div>
                                    </div>
                                    <div class="col-xs-6 col-sm-6 col-md-6">
                                        <div class="form-group">
                                            <label for="pounds">Weight</label>
                                            <input type="text" name="pounds" id="pounds" class="form-control input-sm" bind-value-onchange="@SelectedUser.Pounds" placeholder="Weight" />
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" onclick="@( () => CancelSaveUser(true))" data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" onclick="@( () => SaveUser(SelectedUser))">Save changes</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@functions {
    //int recordsToReturn = 200;
    List<User> users = new List<User>();
    User UnModifiedUser = new User();
    User SelectedUser = new User();
    int namesCount = 0;
    string SortField = "Id";
    bool SortDesc = false;
    string SurnameSort = String.Empty;
    string GivenNameSort = String.Empty;
    string StreetAddressSort = String.Empty;
    string CitySort = String.Empty;
    string StateSort = String.Empty;
    string ZipCodeSort = String.Empty;
    string PhoneSort = String.Empty;
    string LoaderDisplayType = "block;";

    protected async override Task OnInitAsync()
    {
        users = await NamesService.GetNamesDataAsync(SortField, SortDesc);
        namesCount = users.Count;
        ToggleSpinner(false);
        StateHasChanged();
    }

    private void ToggleSpinner(bool spinnerOn)
    {
        LoaderDisplayType = (spinnerOn) ? "block;" : "none;";
    }
    private void SortData(string SortField)
    {
        ToggleSpinner(true);

        BlankDirectionIcons();
        SortDesc = !SortDesc;
        CalcIconDirection(SortField);
        users = NamesService.SortNamesData(SortField, SortDesc, users);

        ToggleSpinner(false);
        StateHasChanged();

    }

    private string CalcIconDirection(string SortField)
    {
        string szDirection = SortDesc == true ? "oi oi-arrow-thick-bottom" : "oi oi-arrow-thick-top";
        switch (SortField)
        {
            case "Surname":
                SurnameSort = szDirection;
                return SurnameSort;
            case "GivenName":
                GivenNameSort = szDirection;
                return GivenNameSort;
            case "StreetAddress":
                StreetAddressSort = szDirection;
                return StreetAddressSort;
            case "City":
                CitySort = szDirection;
                return CitySort;
            case "State":
                StateSort = szDirection;
                return StateSort;
            case "TelephoneNumber":
                PhoneSort = szDirection;
                return PhoneSort;
            case "ZipCode":
                ZipCodeSort = szDirection;
                return ZipCodeSort;
            default:
                return String.Empty;
        }
    }
    void BlankDirectionIcons()
    {
        SurnameSort = "";
        GivenNameSort = "";
        StreetAddressSort = "";
        CitySort = "";
        StateSort = "";
        PhoneSort = "";
        ZipCodeSort = "";
    }

    private async void EditUser(User myUser)
    {
        SelectedUser = myUser;
        User UnModifiedUser = SelectedUser;
        UnModifiedUser = SelectedUser;
        await JSRuntime.InvokeAsync<string>(
                 "appFunctions.showEditUserModal", "");
        StateHasChanged();
    }
    private async Task<List<User>> SaveUser(User SelectedUser)
    {
        //await JSRuntime.InvokeAsync<string>(
        //    "appfunctions.saveConfirmation", "");

        //await JSRuntime.InvokeAsync<string>(
        //    "appFunctions.hideEditUserModal", "");

        users = await NamesService.SaveUserAsync(SortField, SortDesc, users, SelectedUser);

        await JSRuntime.InvokeAsync<string>(
                "appFunctions.hideEditUserModal", "");

        ToggleSpinner(false);
        StateHasChanged();
        return users;
    }

    private async Task<List<User>> CancelSaveUser(bool CancelSave)
    {
        if (CancelSave)
        {
            users = await NamesService.SaveUserAsync(SortField, SortDesc, users, UnModifiedUser);
        }
        

        SelectedUser = null;
        UnModifiedUser = null;

        await JSRuntime.InvokeAsync<string>(
            "appFunctions.hideEditUserModal", "");

        ToggleSpinner(false);
        StateHasChanged();
        return users;
    }
    }

